<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024年年终总结</title>
    <link href="/posts/blog007/"/>
    <url>/posts/blog007/</url>
    
    <content type="html"><![CDATA[<p>不知不觉中，2024年又过去了。于我而言，2024年是最为重要的一年，似乎这么多年来的成长就是为了这一年的丰收。2024年，我完成了博士论文的撰写、通过了博士论文盲审、准时拿到了博士学位、进入到工作岗位中、老婆怀孕自己马上就要当父亲。不仅实现了从学生到社会人身份的转变，更是即将面对从丈夫到父亲身份的转变。今年的主旋律仍然是焦虑和迷茫，仍记得刚毕业时面对广阔人生时的无所适从、不知道下一个目标是什么，再到现在逐渐变得麻木和想开，开始明白平平淡淡才是真。今年于我，无论如何都值得纪念、都意义重大。</p><h1 id="1-大事件回顾"><a href="#1-大事件回顾" class="headerlink" title="1. 大事件回顾"></a>1. 大事件回顾</h1><ul><li>博士毕业</li></ul><p>2023年一年的沉淀终于在2024年产生了回响。为了完成博士论文，2024年过年也没有回洛阳，从初四初五就开始写。不断地思考各章节的逻辑、重做仿真实验、提高文字的学术性、修改论文排版，临到最后被导师逼着重新思考摘要和绪论，反复修改直到提交前的一天。整个五一也没有过好，每天都会刷N次系统，看有没有专家评审意见回来。当最后一个意见回来的时候，终于，轻舟已过万重山。</p><ul><li>进入职场</li></ul><p>6月30日拿到学位证书，7月4日办理入职，无缝衔接进入职场。进入职场后，逐渐改变了自己的心态。从一开始的焦虑迷茫、不知道每天要干什么，想要给自己找各种各样的事情干，到慢慢地习惯平淡、缓慢的生活和工作节奏，10点睡、6点起，有工作就做，没有工作就安安心心做自己的事情。在刚入职的半年里，很幸运一次就中了博后面上基金，也很庆幸赵阳给力直接携部门拿到了省尖兵。虽然前段时间浙江省内审不顺、优秀新人评选失利稍微影响了心态，但是回顾这半年，很满意也很开心，工作节奏平缓，让我很好地完成了职场的过渡。</p><ul><li>老婆怀孕</li></ul><p>刚从学生到职场，又即将变成父亲。我的心态一直是忐忑的，父亲意味着更大的责任，一直没有下定决心、思考清楚，一直觉得自己还是个孩子，自己还没有长大。照顾老婆、照顾孩子，承担起责任和义务，是接下来最需要努力的目标。</p><h1 id="2-心态的变化"><a href="#2-心态的变化" class="headerlink" title="2. 心态的变化"></a>2. 心态的变化</h1><p>2024年来，我最大的变化是心态上的变化。读博以来，一种莫名的焦虑和迷茫一直围绕在我心头，焦虑来源于能否正常按时毕业，而迷茫则来自于我不知道到底要靠什么来填补内心的空虚。刚毕业时尤为明显，还记得当时去日本旅游，我居然会因为做攻略做到焦虑、做到失去旅游的乐趣。而在毕业之后，我还想着每天需要更新什么东西、需要学些什么知识，充满了迷茫和焦虑。我的博士生涯中，留给我一个人思考的时间太多，因此我会思考什么是有意义的、什么才是人生的价值，让我陷入了无尽的内耗之中。幸好工作后，随着一些重复单调的事务进入我的生活，让我开始能够避免去思考虽然可能重要、但是过度思考反而会陷入虚无主义的所谓目标。平平淡淡才是真，没有一步登天，也没法大富大贵。很多事情，也许只有用时间做积分才可能看到收益。</p><p>因此，这一年最大的心态变化，可能是真正接纳自己的平凡，明白赚钱需要依靠时代机遇，并且意识到整个社会的运行法则。接纳平凡、和自己和解，做自己想做的事，并寻找机会、等待下一个风口的到来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023年年终总结</title>
    <link href="/posts/blog006/"/>
    <url>/posts/blog006/</url>
    
    <content type="html"><![CDATA[<p>2023年在不知不觉中就要过去了，这一年对我来说是忍辱负重、厚积薄发的一年，也是最重要的一年。如果没有23年的努力，今年铁延毕。同时，2023年对我来说也是最为迷茫、最为焦躁的一年，我逐渐意识到自己是一个目标驱动很强的人，一直以来我都把毕业当做自己的目标，因此我才没有迷茫。而随着课题的明朗、毕业日期的临近，我逐渐失去了目标，变得迷茫且焦躁，就像即将掉下悬崖之人想要死命地抓住一些东西，但是却什么也抓不到。今年我27岁，差不多已经度过了自己的前1&#x2F;4人生，趁过年前夕，我想总结一下自己的成长过程和求学经历，深度剖析一下自己的性格形成原因，为自己未来的目标理清方向。这篇文章我是处于边写边思考的状态，也就是说，在写下这句话的时候，我还对自己的目标方向一无所知，整个人还处于迷茫之中。但是我深切希望自己在写到总结部分的时候，已经能够昂首挺胸地面对新的一年。</p><h1 id="1-我的生长环境"><a href="#1-我的生长环境" class="headerlink" title="1. 我的生长环境"></a>1. 我的生长环境</h1><p>我生在洛阳、长在洛阳，在上大学以前一直都在洛阳呆着，幼儿园到高中距离自己家骑电动车就20分钟左右。我的爸妈非常非常开明，也非常爱我，从小到大基本都在比较溺爱的环境中长大，十分幸福。我与姥爷家和爷爷家都很亲，记得小时候周内基本都在爷爷奶奶家吃午饭，而周末则会在姥姥姥爷家吃饭。爷爷家这边是两个妹妹，周内的时候都会和小的妹妹一起吃饭，姥爷家这边则是一个哥一个弟，周末在姥爷家吃饭后，就会商量着打游戏。</p><p>我的爸妈对我的性格影响非常大，现在想来，可以说我完美地继承了他俩的优点，也基本继承了他俩的部分缺点。我爸是一个心思很细的人，以前我做了什么错事想瞒着他俩，我妈基本发不现，但是我爸一秒就能发现。受他的影响，我的心思也逐渐变得比较细，能够比较快地观察到他人情感的变化，并据此推测他人的想法。但同时，心思很细的人往往很容易钻牛角尖，而又不善于或者说不想表达自己的情感，就会把心中的问题不断憋着，影响所有人的心情，我爸也不例外。而这个性格同样遗传给了我，从小学到现在，我在和很多人相处时、或者处理很多事的时候，也很容易钻牛角尖，心胸不够宽广，所以我朋友很多，同时也失去过不少朋友。</p><p>我妈的性格则与我爸完全相反，作为一个标准的四川人，性格非常直爽，心胸敞亮，从不小肚鸡肠，有什么事情就会直说。在我妈的影响下，我爸和我的性格都有所改善，但是这是我们的本性，想要真正改变基本不太可能。我妈的一个优点是目标感强、一旦开始做事就要做完，绝不半途而废。这个性格她非常完美地遗传给了我，但是这个性格对于我而言，可以说又爱又恨，它一方面能够促使我努力学习，有的时候我发现我根本不想学习，但是在这个性格的作用下，只要我认定了一个学习目标，比如要写到第XX页，我好像就自动地能够沉下心去一定要去完成；然而另一方面，它让我陷入了无尽的内耗过程，实现目标的过程多时候时候都会十分困难，不是一天两天就完成的，在没有完成目标的时候，我终于执着于这个目标无法自拔。同时，人的一生很多目标是抽象而非具体的，找到目标本就很困难，在找寻目标的时候，往往容易内耗。我妈的缺点是脾气比较直与火爆，典型的四川人脾气，而这种脾气则被我完美继承。</p><h1 id="2-我的性格剖析"><a href="#2-我的性格剖析" class="headerlink" title="2. 我的性格剖析"></a>2. 我的性格剖析</h1><p>如果让我用一个词来归纳我的性格，那我一定会选择<strong>矛盾</strong>。我性格的矛盾体现在多个方面：</p><ul><li>叛逆 &amp; 服从 并存。小的时候我很怕老师，或者说很怕权力比我高的人，记得以前进办公室的时候都带点发抖。但是在骨子里，我其实是一个比较叛逆的人，特别是随着自己的知识增长，有了自己的一套世界观以后，在面对意见相左的权威时，我可能并不会认同，甚至有想要推翻权威的想法。但是另一方面，服从的性格又会让我畏惧；</li><li>奋斗 &amp; 躺平 并存。我继承了我妈目标感强的性格，一旦决定做什么事以后就一定要做完，所谓的奋斗，其实是在这种性格下的自我驱动。但是另一方面，随着我阅历的增长，我意识到很多事情与个人努力关系不大，而是取决于出身，再加上我本身并不喜欢过度竞争，因此我在选择工作时会十分倾向于选择偏躺平和稳定的工作，杜绝加班、避免奋斗；</li><li>渴望竞争 &amp; 惧怕竞争 并存。这是我性格中最为矛盾的一点。在做一件事的时候，我通常在前期时劲头十足，因此在前期时取得的成绩通常位于同龄人的前列，比如初中、高中甚至大学的成绩，这种在同龄人中竞争的胜出能够给我带来一些心情上的愉悦。但是我经受不起挫折，或者说惧怕挫折，成绩和科研进度不可能永远一帆风顺，当我发现自己前期的优势开始渐渐消失时，我为了逃避挫败感，通常不会去进一步努力迎接他们的竞争，而是会选择降低自己的预期来躲避竞争。这个性格导致我很多事情的结果都虎头蛇尾，同时在前期过度追求竞争中的领先，而使自己急功近利，没有打好基础，所以在后期会跟不上后来居上者。</li><li>洞察人心 &amp; 心胸狭隘 并存。一方面，我继承我爸的性格，心思比较细，能够观察到别人的心思，对别人的性格评头论足。另一方面，我自己的心胸并不宽广，很容易让自己陷入牛角尖，在处理自己的情绪时很难控制的好。</li></ul><p>总结来看，各种性格上的矛盾造就了我的今天，我更追求一个高的下限而非一个高的上限，在超出同龄人后我不会想着如何继续让自己进步，而是想着如何继续保持着这种相对的竞争优势，可以说很多时候我不是为了自己而去做事，而是为了超过别人而去做事。这种性格最终导致了我现在一个巨大的迷茫之处，那就是漫漫求学之路即将过去，以后的目标不再是成绩好、准时毕业，而是横亘在自己人生面前的看不见前路的方向，我最终失去了自己的目标。</p><h1 id="3-我的自我救赎"><a href="#3-我的自我救赎" class="headerlink" title="3. 我的自我救赎"></a>3. 我的自我救赎</h1><p>性格上的问题，我自己在读博期间就意识到了。为了让自己少点迷茫，我也曾为自己定下了一些学习以外的目标：</p><ul><li>读书。读书对我而言是一剂良药，它能够很好地缓解我的迷茫。这一年多以来，我读了很多书，以历史书为主。可能读完以后很多都忘记了，只是留了个印象。但是在读书的时候，我的心情比较平静，杂念比较少。同时这种时间上的积分效应让我感觉到心安，会让我觉得过去的日子没有白白浪费；</li><li>有趣的项目。我曾经会自我学习很多编程的项目，比如JAVA SE、HTML三件套、LeetCode等，后来又自己买了树莓派，想要转战硬件做一些有趣的项目。截至目前它们对我的意义比较有限，我从中获取到的安心感和满足感很少，反而更加加重了我的焦虑感，我会为他们排学习计划，思考如何快速学习完这些项目，让我更加焦虑；</li><li>分享生活、撰写教程。在小红书、知乎以及个人博客中，我都开辟了自己的战场。小红书以分享为主，知乎上则写了很多教程，每天看到有人赞同、喜欢，内心也会比较有成就感。我目前还较少为如何创造内容而焦虑，它们对我而言利大于弊。</li></ul><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>写到这里时已经中午12点多了，我有点饿、也有点写不动了。写到这里时，我似乎还不知道未来的目标是什么，但是在第一次深度剖析了自己的性格以后，我有点如释重负的感觉。所有矛盾性格中的两极都是我自己，无论你愿不愿意承认，那都是实实在在的我，渴望竞争的是我，害怕竞争的也是我，内心迷茫的是我，但是对未来总有期待的也是我。也许我应该接受自己。最后，新的一年，或者说毕业后新的人生，我希望有如下目标：</p><ul><li>写好博士论文，争取准时毕业。无论如何，对于现阶段的我而言，这都是最重要且没有之一的事情。未来的两个多月对我而言将永生难忘，而不在这段时间留下遗憾，是当下的我所能做的、能争取到的；</li><li>保证每周阅读时间。读书对我而言是一个企稳器、一个积分器，对我而言，读什么书是次要，而读书过程中的心情平静、以及长久的阅读给我带来的满足感更加重要；</li><li>以输出内容为目的，学习自己喜欢的项目。突然意识到，自己之前觉得接触项目反而增加了自己的焦虑感，可能是源于一种空虚，那就是项目学完之后马上忘却，什么都没有留下。既然这样，那么不妨让自己以输出内容为目的，学习自己喜欢的项目，把结果保存下来，能让自己品味，甚至得到其他人的赞同；</li><li>想做什么事情，就立刻去做，即使当时在做其他重要的事情。有时候总想着等闲下来再去做自己灵机一动想要去实现的事情，但是等到真正闲下来的时候就什么都不想做了。活在当下，想去哪里就去哪里，想做什么就做什么，拒绝自己的拖延症。</li></ul><p>写到这里，突然觉得自己心胸敞亮了起来。突然想起来尼采的那句话：“<strong>人生没有目的，只有过程，所谓的终极目的是虚无的</strong>”。希望有朝一日，我能真正理解这句话，并且坚定不移地践行这句话。新年快乐！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python值传递和引用传递分析</title>
    <link href="/posts/blog005/"/>
    <url>/posts/blog005/</url>
    
    <content type="html"><![CDATA[<p>自己以前用Python手写聚类算法代码时常常会操作列表并进行相应修改，发现自己进行列表操作时往往会得到十分奇怪的结果。上网一查才发现这是一个非常复杂的问题，因此在这里系统地总结一下。本文参考以下博客，在此表示感谢：</p><p><a href="https://blog.csdn.net/weixin_47614014/article/details/125007538">Python值传递和引用传递（详细分析）</a></p><p><a href="https://www.jianshu.com/p/3cabbfde859a">Python浅拷贝与深拷贝详解</a></p><h1 id="1-Python的数据类型"><a href="#1-Python的数据类型" class="headerlink" title="1. Python的数据类型"></a>1. Python的数据类型</h1><p>数据类型用来定义编程语言中相同类型数据的存储形式，即决定如何将不同的数据存储到计算机的内存中，不同数据类型的数据，其存储形式和存储位置也都不同。需要注意的是：不同编程语言对于数据类型的定义均不相同。</p><p>Python的数据类型包括两类，即：</p><ul><li><strong>可变数据类型</strong>：List、Dict、Set等</li><li><strong>不可变数据类型</strong>：String、Number（int、float等）、Tuple等</li></ul><p>变量和不同数据类型在计算机内存中的存储位置如下图所示：</p><p><img src="/img/blog005/memory.png"></p><p>在Python中，所有变量都保存在栈内存中，而所有不同数据类型的数据（每个数据都是一个对象）都保存在堆内存中。这与Java等语言是有较大差异的。</p><h1 id="2-变量赋值"><a href="#2-变量赋值" class="headerlink" title="2. 变量赋值"></a>2. 变量赋值</h1><h2 id="2-1-不可变对象的赋值"><a href="#2-1-不可变对象的赋值" class="headerlink" title="2.1 不可变对象的赋值"></a>2.1 不可变对象的赋值</h2><p>看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span>  <span class="hljs-comment"># Number</span><br>b = a<br>c = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># Tuple</span><br>d = c<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b))  <span class="hljs-comment"># 结果1：id相同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(c), <span class="hljs-built_in">id</span>(d))  <span class="hljs-comment"># 结果2：id相同</span><br>a = a + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b))  <span class="hljs-comment"># 结果3：id不相同(a=2, b=1)</span><br>e = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b), <span class="hljs-built_in">id</span>(e))  <span class="hljs-comment"># 结果4：id均相同</span><br></code></pre></td></tr></table></figure><p>对于结果1和结果2，变量<code>a</code>和<code>c</code>首先被分别指向创建的新对象<code>1</code>和<code>(1, 2, 3)</code>，之后<code>b = a</code>和<code>d = c</code>又分别使变量<code>b</code>和<code>d</code>指向了对象<code>1</code>和<code>(1, 2, 3)</code>。</p><p>对于结果3，这是由于语句<code>a = a + 1</code>则创建了一个新对象<code>2</code>，并使变量<code>a</code>重新指向了<code>2</code>。可以看出：对于不可变对象，重新赋值等操作都不会影响其他变量的值。</p><p>对于结果4，可以看出：Python中的对象可以同时被多个变量引用。在对不可变对象赋值时，它会首先在堆空间中寻找是否存在该对象，若存在则直接指向该对象（即相同的不可变对象只有1个）。</p><h2 id="2-2-可变对象的赋值"><a href="#2-2-可变对象的赋值" class="headerlink" title="2.2 可变对象的赋值"></a>2.2 可变对象的赋值</h2><p>看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># List</span><br>l2 = l1<br><span class="hljs-built_in">print</span>(l1, l2)  <span class="hljs-comment"># 结果1：[1, 2, 3] [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2))  <span class="hljs-comment"># 结果1：id相同</span><br> <br>l2.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(l1, l2)  <span class="hljs-comment"># 结果2：[1, 2, 3, 4] [1, 2, 3, 4]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2))  <span class="hljs-comment"># 结果2：id相同</span><br><br>l2.pop()<br><span class="hljs-built_in">print</span>(l1, l2)  <span class="hljs-comment"># 结果3：[1, 2, 3] [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2))  <span class="hljs-comment"># 结果3：id相同</span><br><br>l2[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(l1, l2)  <span class="hljs-comment"># 结果4：[2, 2, 3] [2, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2))  <span class="hljs-comment"># 结果4：id相同</span><br><br>l2 = l2 + [<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(l1, l2)  <span class="hljs-comment"># 结果5：[2, 2, 3] [2, 2, 3, 4]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2))  <span class="hljs-comment"># 结果5：id不同</span><br><br>l3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>l4 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l3), <span class="hljs-built_in">id</span>(l4))  <span class="hljs-comment"># 结果6：id不同</span><br></code></pre></td></tr></table></figure><p>观察结果2-结果4可以发现，当两个变量同时指向一个可变对象时，对其中一个变量的操作会影响到另一个变量。这是因为可变对象在被修改时并不会像可变对象一样创建一个新的对象并将变量指向该对象，而是直接在原对象上进行修改。由于两个变量都指向该变量，因此两者的值都会随之变化。</p><p>而结果5与结果2-结果4均不同，可以看到两个变量不再指向同一个对象，因此两者的值也发生了变化。这是因为<code>l2 = l2 + [4]</code>创建了一个新的列表对象，并使变量<code>l2</code>指向了这个对象。但是这里需要注意，如果语句改为<code>l2 += [4]</code>，则<strong>其结果与结果2-4是相同的</strong>，这是因为该语句并没有创建新的对象。</p><p>结果6和不可变对象中的结果4形成对比，对于可变对象，可以创建多个完全相同的不同对象（很好理解，因为对象是可变的，当前相同不代表以后一直会相同），因此<code>l3</code>和<code>l4</code>并不相同。</p><h2 id="2-3-变量删除"><a href="#2-3-变量删除" class="headerlink" title="2.3 变量删除"></a>2.3 变量删除</h2><p>Python中可以删除变量，但是对象无法删除，如以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">del</span> l<br></code></pre></td></tr></table></figure><p>删除变量<code>l</code>后将无法访问，但是对象<code>[1, 2, 3]</code>仍然存在。Python程序运行时，其自带的垃圾回收系统会跟踪每个对象的引用。如果对象除了被删除变量外还被其他变量引用，就不会被回收，反之则会被回收。</p><h2 id="2-4-参数传递"><a href="#2-4-参数传递" class="headerlink" title="2.4 参数传递"></a>2.4 参数传递</h2><p>变量赋值的最常见应用是函数的参数传递。Python中的参数传递是赋值传递(pass by assignment)，或者叫作对象的引用传递(pass by object reference)。也就是说，Python在参数传递时，是让形参和实参指向相同的对象（类似于<code>b = a</code>，其中<code>b</code>为形参，<code>a</code>为实参）。</p><p>因此，参数传递和变量赋值一样，需要分为不可变对象的传递和可变对象的传递。显而易见，如果实参为不可变对象，则无论在函数中如何修改形参的值，都不会影响实参；然而如果实参为可变对象，则在函数中对形参的修改，将影响到实参。</p><h2 id="2-5-变量赋值总结"><a href="#2-5-变量赋值总结" class="headerlink" title="2.5 变量赋值总结"></a>2.5 变量赋值总结</h2><p>在Python语言中，变量赋值具有以下特点：</p><ul><li>变量赋值，只是令变量指向了某个数据的对象，并不是将该对象拷贝给变量，一个对象可以被多个变量指向；</li><li>可变对象的变化会影响所有指向该对象的变量；而所有指向不可变对象的值总是一样的，不会改变，但是可以通过某些操作（<code>+=</code>等）返回一个新的对象；</li><li>函数的参数传递中的形参和实参类似于变量赋值，变化规律和变量赋值一样，分为可变对象和不可变对象。</li></ul><h1 id="3-多层对象赋值对比"><a href="#3-多层对象赋值对比" class="headerlink" title="3. 多层对象赋值对比"></a>3. 多层对象赋值对比</h1><p>在Python中，对象内部可以嵌套其他对象，例如列表内的元素还是一个列表。这种多层对象的赋值对比如下：</p><h2 id="3-1-外层不可变，内层存在可变"><a href="#3-1-外层不可变，内层存在可变" class="headerlink" title="3.1 外层不可变，内层存在可变"></a>3.1 外层不可变，内层存在可变</h2><p>看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = ([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>l2 = ([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>l3 = l2<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2), <span class="hljs-built_in">id</span>(l3))  <span class="hljs-comment"># 结果1：l2和l3的id相同，l1不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">0</span>]))  <span class="hljs-comment"># 结果2：l2和l3的id相同，l1不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># 结果3：三者id均相同</span><br></code></pre></td></tr></table></figure><p>可以看到，在这种情况下得到的结论与可变对象相同，即在创建完全相同的新对象时，不会引用之前的对象地址，而是创建一个全新的对象，且其中的每一个可变对象元素都是全新的，而对于赋值操作则仍然会拷贝源对象的地址。其引用关系如下图所示：</p><p><img src="/img/blog005/3.1.png"></p><h2 id="3-2-外层不可变，内层不可变"><a href="#3-2-外层不可变，内层不可变" class="headerlink" title="3.2 外层不可变，内层不可变"></a>3.2 外层不可变，内层不可变</h2><p>看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = ((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">3</span>)<br>l2 = ((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">3</span>)<br>l3 = l2<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2), <span class="hljs-built_in">id</span>(l3))  <span class="hljs-comment"># 结果1：id均相同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">0</span>]))  <span class="hljs-comment"># 结果2：id均相同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># 结果3：id均相同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(<span class="hljs-number">3</span>))  <span class="hljs-comment"># 结果4：id均相同</span><br></code></pre></td></tr></table></figure><p>可以看出，当外层和内层均为不可变对象时，其整体可以视为是一个不可变对象，其在内存中就只有一个，是不会创建新的对象的。其引用关系如下图所示：</p><p><img src="/img/blog005/3.2.png"></p><h2 id="3-3-外层可变，内层存在可变"><a href="#3-3-外层可变，内层存在可变" class="headerlink" title="3.3 外层可变，内层存在可变"></a>3.3 外层可变，内层存在可变</h2><p>看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">3</span>]<br>l2 = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">3</span>]<br>l3 = l2<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1), <span class="hljs-built_in">id</span>(l2), <span class="hljs-built_in">id</span>(l3))  <span class="hljs-comment"># 结果1：l2和l3的id相同，l1不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l1[<span class="hljs-number">1</span>]))    <span class="hljs-comment"># 结果2：id不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">0</span>]))  <span class="hljs-comment"># 结果3：l2和l3的id相同，l1不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># 结果4：l2和l3的id相同，l1不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(l1[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(l2[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(l3[<span class="hljs-number">2</span>]))  <span class="hljs-comment"># 结果5：id均相同</span><br></code></pre></td></tr></table></figure><p>可以看出，当外层可变时，就符合可变对象的所有特征。对于内层相同的可变对象，都会创建一个新的对象。其引用关系如下图所示，相比文字更加清晰：</p><p><img src="/img/blog005/3.3.png"></p><h1 id="4-赋值、浅拷贝和深拷贝"><a href="#4-赋值、浅拷贝和深拷贝" class="headerlink" title="4. 赋值、浅拷贝和深拷贝"></a>4. 赋值、浅拷贝和深拷贝</h1><p>在经过前三章的铺垫后，我们终于可以介绍Python中赋值、浅拷贝和深拷贝三者之间的区别：</p><ul><li>赋值：将一个变量对于某个对象的引用赋给另一个变量，前面三章都是赋值</li><li>浅拷贝：拷贝所有子对象的引用，而不拷贝子对象的内容，语法为<code>copy.copy()</code></li><li>深拷贝：拷贝所有子对象的引用和内容，这是真正意义上的“复制”，会创建一个全新的对象，语法为<code>copy.deepcopy()</code></li></ul><p>因此，对于单层对象，浅拷贝和深拷贝的使用没有任何区别。而对于多层对象，由于浅拷贝只拷贝了子对象的引用，因此对于子可变对象的操作会影响到其它变量，但是这种影响是局部的，仅存在于子可变对象中，而对于最外层对象的操作（如添加、删除元素等）都不会影响到其它变量。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>桌面版ChatGPT客户端初尝试</title>
    <link href="/posts/blog004/"/>
    <url>/posts/blog004/</url>
    
    <content type="html"><![CDATA[<p>ChatGPT火了已经有一段时间了，从生成诗词到给出试卷中的答案，它的出现确实给了人类一些小小的人工智能震撼。不过官网的界面并不十分友好，今天简单介绍一个桌面版的ChatGPT客户端，它具有非常友好的交互界面，还具有很多非常实用的功能，大大提升了使用效率。</p><h1 id="1-注册OpenAI账号"><a href="#1-注册OpenAI账号" class="headerlink" title="1. 注册OpenAI账号"></a>1. 注册OpenAI账号</h1><p>使用ChatGPT的基本功能是免费的，但是需要注册一个OpenAI的账号进行登录。由于众所周知的原因，OpenAI并不对中国（包括中国香港）开放，用国内的手机号注册会出现如下错误：</p><blockquote><p>OpenAI’s services are not available in your country</p></blockquote><p>因此，需要采用科学上网+国外手机号的方法实现注册。有很多教程可供参考：</p><p><a href="https://zhuanlan.zhihu.com/p/589956094">1. 能让你玩上一天的 openAI ChatGPT 注册详细教程</a></p><p><a href="https://cloud.tencent.com/developer/article/2190154">2. 一文教你快速注册OpenAi（ChatGPT），国内也可以！</a></p><p>自己在实践时，出现了大大小小的问题，以下几点经验分享一下：</p><ul><li>推荐采用谷歌的<strong>gmail邮箱</strong>进行注册，qq邮箱等可能会出现问题；</li><li>科学上网的接入点，<strong>不能选择香港！</strong>推荐日本、韩国等；</li><li>选择手机所在的地区，需要和科学上网的接入点<strong>保持一致</strong>；</li><li>建议使用<strong>无痕模式</strong>访问网页；</li><li>当注册失败出现上面不提供服务的错误时，清除<strong>浏览器缓存、cookie</strong>（谷歌浏览器的快捷键是<code>ctrl+shift+del</code>）并重新尝试。</li></ul><p>当完成注册后，就可以通过OpenAI账号进入到ChatGPT的官网页面。到这一步，ChatGPT的功能就已经能够正常使用了。</p><h1 id="2-使用客户端登录ChatGPT"><a href="#2-使用客户端登录ChatGPT" class="headerlink" title="2. 使用客户端登录ChatGPT"></a>2. 使用客户端登录ChatGPT</h1><p>该客户端为Github上的开源软件，地址为：<a href="https://github.com/lencx/ChatGPT%EF%BC%8C%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81">https://github.com/lencx/ChatGPT，同时支持</a> Mac、Windows和Linux。官方提供了安装包，可以直接进行下载安装。其界面和ChatGPT官网一样，输入账号后就可以进行登录，一劳永逸（注意：每次使用都需要开启科学上网）。客户端界面如下所示：</p><p><img src="/img/blog004/interface.png"></p><p>这个客户端有两个非常方便的功能：</p><h2 id="2-1-导出答案"><a href="#2-1-导出答案" class="headerlink" title="2.1 导出答案"></a>2.1 导出答案</h2><p>在生成答案后，客户端中允许将这些答案以<code>markdown</code>、<code>png</code>和<code>pdf</code>格式输出，这样免去了我们复制粘贴的麻烦，如下所示：</p><p><img src="/img/blog004/print.png" alt="print"></p><h2 id="2-2-快捷命令"><a href="#2-2-快捷命令" class="headerlink" title="2.2 快捷命令"></a>2.2 快捷命令</h2><p>在对话框中输入 <code>/</code> 就可以激活快捷命令，其本质上是一种预设的文本，能够提高使用效率。可以在<code>Preferences-Control Center-Language Model-User Custom</code>中对快捷命令进行预定义，如下所示：</p><p><img src="/img/blog004/cmd.png"></p><p>其中， <code>/&#123;cmd&#125;</code> 是我们使用快捷命令的指令，<code>Act</code> 是对命令的描述，<code>Prompt</code> 是预设的文本。具体教程可以见<a href="https://cloud.tencent.com/developer/article/2205477">这里</a>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows DOS命令和批处理脚本</title>
    <link href="/posts/blog003/"/>
    <url>/posts/blog003/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1. 基本命令"></a>1. 基本命令</h1><h2 id="1-1-文件操作"><a href="#1-1-文件操作" class="headerlink" title="1.1 文件操作"></a>1.1 文件操作</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看当前路径下的所有文件夹和文件（文件夹内的文件不会显示）</span><br><span class="hljs-built_in">dir</span><br><span class="hljs-comment"># 打开文件夹</span><br><span class="hljs-comment"># !!Tab可以智能补充文件名字，非常好用</span><br><span class="hljs-built_in">cd</span> test<br><span class="hljs-comment"># 以下为操作文件夹</span><br><span class="hljs-comment"># 创建文件夹</span><br>mkdir test<br><span class="hljs-built_in">md</span> test<br><span class="hljs-comment"># 重命名文件夹</span><br><span class="hljs-built_in">ren</span> test test1<br><span class="hljs-comment"># 将文件夹a中的文件复制到b文件夹（相对路径或绝对路径）</span><br><span class="hljs-built_in">copy</span> a b<br><span class="hljs-comment"># 删除文件夹</span><br><span class="hljs-built_in">rmdir</span> test<br><span class="hljs-built_in">rd</span> test<br><span class="hljs-comment"># 以下为操作文件</span><br><span class="hljs-comment"># 删除文件</span><br><span class="hljs-built_in">del</span> test.txt<br><span class="hljs-comment"># 重命名文件</span><br><span class="hljs-built_in">move</span> test.txt test1.txt<br><span class="hljs-comment"># 移动文件</span><br><span class="hljs-built_in">move</span> c:\test.txt d:\test.txt<br></code></pre></td></tr></table></figure><h2 id="1-2-基本运算"><a href="#1-2-基本运算" class="headerlink" title="1.2 基本运算"></a>1.2 基本运算</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 设置变量</span><br><span class="hljs-built_in">set</span> a=<span class="hljs-number">10</span><br><span class="hljs-comment"># 代数运算</span><br><span class="hljs-built_in">set</span> /a b=%a%+<span class="hljs-number">2</span><br><span class="hljs-built_in">set</span> /a b=%a%/<span class="hljs-number">2</span><br><span class="hljs-comment"># 重定向运算</span><br><span class="hljs-comment"># 覆盖文件原始文本</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt; a.txt<br><span class="hljs-comment"># 在文件末尾追加文本</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt;&gt; a.txt<br><span class="hljs-comment"># 多命令运算</span><br><span class="hljs-comment"># 与操作，只要前面有命令错误，后续就不执行</span><br>ipconfig &amp;&amp; net user<br><span class="hljs-comment"># 或操作，只要前面有命令正确，后续就不执行</span><br>ipconfig || net user<br><span class="hljs-comment"># 管道运算，将前者的输出作为后者的输入</span><br><span class="hljs-built_in">dir</span> | find <span class="hljs-string">&quot;*.txt&quot;</span>  <span class="hljs-comment"># 找到当前路径下所有的txt文件</span><br></code></pre></td></tr></table></figure><h2 id="1-3-批处理程序常用命令"><a href="#1-3-批处理程序常用命令" class="headerlink" title="1.3 批处理程序常用命令"></a>1.3 批处理程序常用命令</h2><p>批处理程序是windows自带的脚本，可以在 <code>cmd</code> 和 <code>powershell</code> 中直接运行，文件后缀为.bat，主要命令包括：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 不输出描述（一般加在开头）</span><br><span class="hljs-selector-tag">@</span> <span class="hljs-built_in">echo</span> off<br><span class="hljs-comment"># 执行完脚本后结束（一般加在结尾）</span><br>pause<br><span class="hljs-comment"># 输出</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-comment"># 传参: %1</span><br><span class="hljs-comment"># test.bat: echo %1</span><br>test.bat <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-comment"># 调用其他脚本</span><br>call test2.bat<br></code></pre></td></tr></table></figure><h2 id="1-4-其他常用命令"><a href="#1-4-其他常用命令" class="headerlink" title="1.4 其他常用命令"></a>1.4 其他常用命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># cmd中的注释和powershell并不相同</span><br>rem <span class="hljs-string">&quot;这是注释&quot;</span><br>:: <span class="hljs-string">&quot;这是注释&quot;</span><br><span class="hljs-comment"># 清屏</span><br><span class="hljs-built_in">cls</span><br><span class="hljs-comment"># 打开某可执行文件</span><br>d:\matlab.exe<br><span class="hljs-comment"># 用某可执行文件打开某文件</span><br>d:\matlab.exe d:\test.m<br><span class="hljs-comment"># 文件树状图</span><br>tree<br><span class="hljs-comment"># 循环文件夹</span><br><span class="hljs-keyword">for</span> /d %%a <span class="hljs-keyword">in</span> (*) <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> %%a  <span class="hljs-comment"># 打印当前目录所有文件夹</span><br><span class="hljs-keyword">for</span> /d %%a <span class="hljs-keyword">in</span> (*) <span class="hljs-keyword">if</span> %%a==test <span class="hljs-built_in">rd</span> %%a  <span class="hljs-comment"># 遍历文件夹，如有名为test的则删除</span><br><span class="hljs-comment"># 循环文件</span><br><span class="hljs-keyword">for</span> /<span class="hljs-built_in">r</span> <span class="hljs-string">&quot;d:\matlab&quot;</span> %%a <span class="hljs-keyword">in</span> (*.m) <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> %%a  <span class="hljs-comment"># 打印d:\matlab文件夹下所有m文件</span><br></code></pre></td></tr></table></figure><h1 id="2-用DOS命令实现自动化仿真"><a href="#2-用DOS命令实现自动化仿真" class="headerlink" title="2. 用DOS命令实现自动化仿真"></a>2. 用DOS命令实现自动化仿真</h1><p>作为工科学生，我们很多时候需要对仿真软件设置大量不同的参数组合来获得多组不同的结果，当组合数爆炸时，这个工作量会十分巨大，反复摧残我们的心灵。这时，采用DOS命令来实现自动化仿真将大幅降低我们的工作量。其基本工作原理如下：<br><img src="/img/blog003/outline.png"></p><p>第一步中，主流编程语言（Python、Matlab等）都能够直接调用dos命令。例如Python中的 <code>os.system()</code> ，Matlab中的 <code>dos()</code> 等。</p><p>第二步中，“跑”仿真的过程，本质上是将仿真模型编译为一个特定格式的文件，通过仿真软件读取这个文件进行计算，因此只需要用仿真软件（.exe）将仿真模型文件打开即可。</p><p>第三步中，仿真软件一般都具有和其他编程语言的接口，能够将仿真结果通过接口传入编程语言，进行后续处理。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022年大事记</title>
    <link href="/posts/blog002/"/>
    <url>/posts/blog002/</url>
    
    <content type="html"><![CDATA[<p>在2021年年初时自己就曾计划随手记录一下身边发生的大事，做一个历史的“亲历者”和“记录者”。但由于懒惰等原因，竟然一下子拖了两年。新年新气象，2023年伊始，我想重新开始这项计划，从平淡的生活中寻找到属于自己的宝藏。今天是2023年1月5号，是刚开完组会的第二天，神清气爽，暂时忘却无尽的课题争执，回忆一下我印象深刻的2022年的大事：</p><h3 id="1-2022年2月24日：俄乌冲突爆发"><a href="#1-2022年2月24日：俄乌冲突爆发" class="headerlink" title="1. 2022年2月24日：俄乌冲突爆发"></a>1. 2022年2月24日：俄乌冲突爆发</h3><p>莫斯科时间2月24日凌晨6时整（乌克兰时间5时整），俄罗斯总统普京宣布了一项以乌克兰非军事化和去纳粹化为目标，以及阻止乌克兰政府对本国人民实施种族灭绝的特殊军事行动。2月-5月的时间线整理可见<a href="https://www.zwbk2009.com/index.php?title=2022%E5%B9%B4%E4%BF%84%E4%B9%8C%E6%88%98%E4%BA%89%E8%BF%87%E7%A8%8B%EF%BC%88%E6%97%B6%E9%97%B4%E8%A1%A8%EF%BC%89">这里</a>。这是我自记事起第一次亲身见证一场“现代战争”的爆发。对于战争的正义性等，不同立场的人有截然不同的看法，国内互联网也为此争执不休。如今已经来到2023年，冲突仍在持续，结局如何尚未知晓。</p><h3 id="2-2022年3月21日：东航MU5735空难"><a href="#2-2022年3月21日：东航MU5735空难" class="headerlink" title="2. 2022年3月21日：东航MU5735空难"></a>2. 2022年3月21日：东航MU5735空难</h3><p>2022年3月21日，东方航空云南有限公司波音737-800型B-1791号机，执行MU5735昆明至广州航班，在广州管制区域巡航时，自航路巡航高度8900米快速下降，最终坠毁在广西壮族自治区梧州市藤县埌南镇莫埌村附近。飞机撞地后解体，机上123名旅客、9名机组成员全部遇难。截止目前，尚未有官方告知失事的原因。<br>我平时很怕坐飞机，因为感觉飞到天上以后自己再也无法掌控生死，很难想象失事前飞机上的人员的心情，希望以后这样的悲剧不要再发生。</p><h3 id="3-2022年7月8日：安倍遇刺身亡"><a href="#3-2022年7月8日：安倍遇刺身亡" class="headerlink" title="3. 2022年7月8日：安倍遇刺身亡"></a>3. 2022年7月8日：安倍遇刺身亡</h3><p>当地时间2022年7月8日11时30分左右，日本前首相安倍晋三在奈良市街头发表演讲时遭枪击倒地，17时03分，安倍晋三因伤势过重不治身亡，终年67岁。</p><h3 id="4-2022年8月2日：佩洛西窜访台湾"><a href="#4-2022年8月2日：佩洛西窜访台湾" class="headerlink" title="4. 2022年8月2日：佩洛西窜访台湾"></a>4. 2022年8月2日：佩洛西窜访台湾</h3><p>2022年7月，有报道称佩洛西将于八月访台，但没有官方的声明究竟来或不来，在7月28日的官方行程中并未包括台湾。直到8月2号晚八点过，佩洛西的飞机经印尼转向，绕过中国南海。8月2日22时43分左右，美国众议院议长佩洛西专机降落台北松山机场。22点54分左右，佩洛西走下专机，随后共计窜访台湾20个小时左右。之后，中国解放军在台湾周边展开了长时间、一系列的军事演习。<br>当时的场景我印象深刻，我在和兄弟吃饭，边吃边看佩洛西专机的行程直播，这种心情至今难忘。</p><h3 id="5-2022年9月26日：北溪管道爆炸"><a href="#5-2022年9月26日：北溪管道爆炸" class="headerlink" title="5. 2022年9月26日：北溪管道爆炸"></a>5. 2022年9月26日：北溪管道爆炸</h3><p>9月26日，俄罗斯向欧洲输送天然气的“北溪-1”和“北溪-2”海底管道发生爆炸，导致大量天然气泄漏。各方普遍怀疑泄漏为“蓄意破坏”所致。</p><h3 id="6-2022年11月20日：卡塔尔世界杯"><a href="#6-2022年11月20日：卡塔尔世界杯" class="headerlink" title="6. 2022年11月20日：卡塔尔世界杯"></a>6. 2022年11月20日：卡塔尔世界杯</h3><p>2022年11月20日至12月18日，在卡塔尔举行第22届国际足联世界杯。我不看球，但是作为一个吃瓜人，见证了很多爆冷，比如：韩国2:1葡萄牙，摩洛哥2:0比利时。最后恭喜阿根廷，恭喜梅西，足球界的OG大魔王！</p><h3 id="7-2022年11月25日：吴亦凡被判13年"><a href="#7-2022年11月25日：吴亦凡被判13年" class="headerlink" title="7. 2022年11月25日：吴亦凡被判13年"></a>7. 2022年11月25日：吴亦凡被判13年</h3><p>2022年11月25日上午，北京市朝阳区人民法院一审公开宣判被告人吴亦凡强奸、聚众淫乱案，对被告人吴亦凡以强奸罪判处有期徒刑十一年六个月，附加驱逐出境；以聚众淫乱罪判处有期徒刑一年十个月，数罪并罚，决定执行有期徒刑十三年，附加驱逐出境。该事件起始于2021年7月都美竹在微博爆料吴亦凡，如今终于有了定棺盖论。事件来龙去脉可见<a href="https://3g.163.com/dy/article/HN1MF6J50552O25P.html">这里</a>。</p><h3 id="8-2022年11月30日：江泽民同志去世"><a href="#8-2022年11月30日：江泽民同志去世" class="headerlink" title="8. 2022年11月30日：江泽民同志去世"></a>8. 2022年11月30日：江泽民同志去世</h3><p>江泽民同志患白血病合并多脏器功能衰竭，抢救无效，于2022年11月30日12时13分在上海逝世，享年96岁。这应该是我们95后第一次在互联网时代经历前国家领导人的去世。长者于我有特殊回忆，随着年龄的增长，我对他的敬佩之情越来越深。除了卓越的领导才能，长者同时也是半个能源同行，早在2008年，他就在上海交通大学学报上发表《对中国能源问题的思考》一文，从10多年来中国能源行业的发展来看，预测准确，展现了他对能源行业的深刻见解和敏锐洞悉。不仅如此，作为工科学子，他没有工科学生的“呆板”和“无聊”，精通演唱、乐器、乒乓球等，运动、艺术天赋极佳。他的去世，象征着一个的时代结束。<br>2022年，两位和他同时代（即诞生于上世纪20年代或30年代初）的其他国家最高领导人（包括实际和名义最高领导人）也去世了：</p><ul><li>2022年8月30日（俄罗斯当地时间）：苏联末任领导人<strong>戈尔巴乔夫</strong>去世，出生于1931年3月2日，终年91岁</li><li>2022年9月8日（英国当地时间）：英国女王<strong>伊丽莎白二世</strong>去世，出生于1926年2月2日，享年96岁</li></ul><p> 截止2023年1月5日，决赛圈中仍然健在的同时代其他国家领导人可见<a href="https://www.zhihu.com/question/552517829/answer/2666057041">这篇知乎回答</a>。</p><h3 id="9-2022年12月13日：杭州市健康码退出历史舞台"><a href="#9-2022年12月13日：杭州市健康码退出历史舞台" class="headerlink" title="9. 2022年12月13日：杭州市健康码退出历史舞台"></a>9. 2022年12月13日：杭州市健康码退出历史舞台</h3><p>12月7日，国务院联防联控机制综合组发布《关于进一步优化落实新冠肺炎疫情防控措施的通知》（简称<strong>优化落实疫情防控新十条</strong>）。一星期内，杭州市逐步放开群体核酸检测、行程卡查验、健康码审查。12月13日，杭州市内乘坐公共交通、进出公共场所等无需出示健康码，健康码退出历史舞台。从2020年初疫情爆发，到阿里紧急开发健康码辅助新冠溯源，健康码似乎跟随我两年有余，这次又见证了历史。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fluid搭建个人博客网站</title>
    <link href="/posts/blog001/"/>
    <url>/posts/blog001/</url>
    
    <content type="html"><![CDATA[<p>这篇博文我已经拖更半年了，半年前兴致勃勃地买了域名、搭起了个人博客，结果到现在网页上还是空空如也，马上就要2023年了，准备从现在开始，每天坚持做一件事，希望时间的积分效应能让我有所收益。<br>本博文将介绍如何从零开始一步一步搭建出属于自己的个人博客网站，使用的框架为Hexo+Fluid。在写作时主要参考了以下博文，在此对这些作者表示由衷的感谢：<br><a href="https://juejin.cn/post/6844904131266609165">(1) 彻底搞懂如何使用Hexo+GitHubPages搭建个人微博</a><br><a href="https://zhuanlan.zhihu.com/p/26625249/">(2) GitHub+Hexo 搭建个人网站详细教程</a><br>本文会持续更新，最近一次更新时间：2024年07月03日</p><h1 id="1-配置GitHubPages"><a href="#1-配置GitHubPages" class="headerlink" title="1. 配置GitHubPages"></a>1. 配置GitHubPages</h1><p>简单来说，GitHubPages的作用是提供免费的静态网站托管服务，我们只需要把自己写的html文档保存在其仓库中，该服务就会对这些文件进行处理并展示为网页的样式，即近似实现了<strong>Web服务器</strong>的功能，创建GitHubPages需要在GitHub上完成（注册GitHub账号以及配置SSH公钥可见<a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">这篇博文</a>），具体步骤为：<br>(1) 点击GitHub首页右上角的“+”按钮，在弹出窗口选择“New respository”；<br>(2) 在新页面中的“Repository name”一栏输入<strong>你GitHub的用户名</strong>。注意：必须输入用户名，否则创建的将不是GitHubPages而是一个普通的仓库；<br>(3) 勾选“Initialize this repository with a README”选项，并点击“Create Respository”按钮。<br>此时在浏览器输入https:&#x2F;&#x2F;你GitHub的用户名.github.io后，已经可以看到一个简陋的界面，这就说明你已经成功开启GithubPages服务了。</p><h1 id="2-安装Hexo并初始化博客"><a href="#2-安装Hexo并初始化博客" class="headerlink" title="2. 安装Hexo并初始化博客"></a>2. 安装Hexo并初始化博客</h1><p>Hexo是一个快速且简洁的博客框架，用户可以通过Hexo快速生成一个完整的博客页面。Hexo使用Node.js来对页面进行快速渲染，因此需要同时安装Node.js和Hexo：</p><h2 id="2-1-安装Node-js"><a href="#2-1-安装Node-js" class="headerlink" title="2.1 安装Node.js"></a>2.1 安装Node.js</h2><p>可在<a href="https://nodejs.org/en/">官网</a>直接安装Node.js，建议使用Node.js 10.0及以上版本。可以在cmd中输入以下命令检查自己是否安装成功：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">node <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></figure><h2 id="2-2-安装Hexo"><a href="#2-2-安装Hexo" class="headerlink" title="2.2 安装Hexo"></a>2.2 安装Hexo</h2><p>npm是随Node.js一起安装的包管理器，可以使用npm直接安装Hexo：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><h2 id="2-3-初始化博客"><a href="#2-3-初始化博客" class="headerlink" title="2.3 初始化博客"></a>2.3 初始化博客</h2><p>在你喜欢的位置上新建一个文件夹，命名为《<strong>你GitHub的用户名.github.io</strong>》，该文件夹以后统称为<strong>站点根目录</strong>。进入到该目录的上级目录打开cmd，输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init &lt;folder&gt;   <span class="hljs-comment"># 使用Hexo初始化站点根目录，即你新建的文件夹名</span><br><span class="hljs-built_in">cd</span> &lt;folder&gt;   <span class="hljs-comment"># 打开该文件</span><br>npm install   <span class="hljs-comment"># 安装npm所依赖的库</span><br></code></pre></td></tr></table></figure><p>完成上述命令后，Hexo就会自动在站点根目录中生成一系列用于生成博客的文件，你只需要输入以下命令（需要在cmd中进入站点根目录），就可以在本地浏览博客：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo g   <span class="hljs-comment"># 生成博客，等同于 hexo generate</span><br>hexo s   <span class="hljs-comment"># 本地预览，等同于 hexo server</span><br></code></pre></td></tr></table></figure><p>在浏览器中输入<code>http://localhost:4000</code>，就可以在本地看到一个原始的博客页面。此时，站点根目录的目录结构如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">|<span class="hljs-literal">--</span> _config.yml<br>|<span class="hljs-literal">--</span> node_modules<br>|<span class="hljs-literal">--</span> package<span class="hljs-literal">-lock</span>.json<br>|<span class="hljs-literal">--</span> package.json<br>|<span class="hljs-literal">--</span> scaffolds<br>|<span class="hljs-literal">--</span> source<br>|<span class="hljs-literal">--</span> themes<br>|<span class="hljs-literal">--</span> public<br>|<span class="hljs-literal">--</span> db.json<br></code></pre></td></tr></table></figure><p>事实上，在执行<code>hexo g</code>命令后，Hexo将<code>souce</code>文件夹下的Markdown和HTML文件解析到了<code>public</code>文件夹下，并生成了<code>db.json</code>文件。</p><h1 id="3-将本地博客部署到GitHubPages"><a href="#3-将本地博客部署到GitHubPages" class="headerlink" title="3. 将本地博客部署到GitHubPages"></a>3. 将本地博客部署到GitHubPages</h1><p>最直接的方式使用git将本地博客文件夹关联到GitHub的远程仓库，并且把本地文件push到对应的仓库中。Hexo提供了一种更为简洁的方式，只需要在<code>_config.yml</code>文件中进行配置并在命令行中输入相应命令就可以将本地博客发布到GitHubPages上。<br>首先，打开<code>_config.yml</code>文件，在deployment配置项下设置如下参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:你GitHub的用户名/你GitHub的用户名.github.io.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后，安装以下插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer-git</span> —save<br></code></pre></td></tr></table></figure><p>最后，执行以下命令发布本地博客到远程仓库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo d   <span class="hljs-comment"># 推送博客，等同于 hexo deploy</span><br></code></pre></td></tr></table></figure><p>此时，在浏览器中输入地址<code>你GitHub的用户名.github.io</code>，就可以在互联网上看到本地的博客了（上传需要时间，如果看不到等待一段时间即可）。</p><h1 id="4-配置域名"><a href="#4-配置域名" class="headerlink" title="4. 配置域名"></a>4. 配置域名</h1><p>用上述方式访问你的博客太过复杂，我们可以选用自己喜欢的域名作为网址供人访问。因此，我们需要将自己购买的域名和GitHubPages进行绑定。</p><h2 id="4-1-购买域名"><a href="#4-1-购买域名" class="headerlink" title="4.1 购买域名"></a>4.1 购买域名</h2><p>目前国内主流的域名代理厂商包括<a href="https://cloud.tencent.com/">腾讯云</a>、<a href="https://www.aliyun.com/">阿里云</a>等，我个人使用的是腾讯云，便宜的域名一般10-20块钱一年。</p><h2 id="4-2-添加记录"><a href="#4-2-添加记录" class="headerlink" title="4.2 添加记录"></a>4.2 添加记录</h2><p>购买域名后进入管理控制台的域名列表，找到你的个性化域名并点击解析，添加以下两条记录：</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>线路类型</th><th>记录值</th></tr></thead><tbody><tr><td>@</td><td>A</td><td>默认</td><td>185.199.108.153</td></tr><tr><td>@</td><td>A</td><td>默认</td><td>185.199.109.153</td></tr><tr><td>@</td><td>A</td><td>默认</td><td>185.199.110.153</td></tr><tr><td>@</td><td>A</td><td>默认</td><td>185.199.111.153</td></tr><tr><td>www</td><td>CNAME</td><td>默认</td><td>你GitHub的用户名.github.io</td></tr></tbody></table><p>这样的目的是能够同时添加顶级域名（通过A解析）和子域名（通过CNAME解析），这也是GitHubPages推荐的方式，详细说明可见<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">官方文档</a>。<br>之后，在GitHub中打开该项目（即名称为“你GitHub的用户名.github.io”的仓库，需要注意此时必须关闭vpn，否则会弹出404无法进入），在<code>Settings-Pages-Custom domain</code>中输入你购买的域名，并点击<code>Save</code>保存。注意：只需要输入域名，<strong>不要添加www</strong>！例如你的域名是<code>abc.com</code>，则不要输入<code>www.abc.com</code>，否则以后在输入网址访问博客时必须带有www。<br>现在，你用三种域名都可以访问到你的博客：<code>www.abc.com</code>、<code>abc.com</code>和<code>你GitHub的用户名.github.io</code>。</p><h2 id="4-3-配置CNAME文件"><a href="#4-3-配置CNAME文件" class="headerlink" title="4.3 配置CNAME文件"></a>4.3 配置CNAME文件</h2><p>设置<code>Custom domain</code>的步骤在每次执行<code>hexo d</code>后都会重置失效，为了一劳永逸，需要在站点根目录的<code>source</code>文件夹内新建一个txt文件，在其中<strong>输入你购买的域名</strong>（仍然不带www），并将txt文件<strong>重命名为CNAME</strong>（要把.txt删掉！）。这样就可以解决每次都需要修改<code>Custom domain</code>的问题。</p><h1 id="5-更换主题"><a href="#5-更换主题" class="headerlink" title="5. 更换主题"></a>5. 更换主题</h1><h2 id="5-1-选择你喜欢的主题"><a href="#5-1-选择你喜欢的主题" class="headerlink" title="5.1 选择你喜欢的主题"></a>5.1 选择你喜欢的主题</h2><p>个人认为Hexo默认的主题不够好看，可以选择不同类型的主题，官网提供了丰富的<a href="https://hexo.io/themes/">主题样式</a>，常用的包括Fluid、Next等。本博客将以<strong>Fluid</strong>为主题进行讲解。</p><h2 id="5-2-主题安装"><a href="#5-2-主题安装" class="headerlink" title="5.2 主题安装"></a>5.2 主题安装</h2><p>在站点根目录下输入以下命令就可以完成Fluid的安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">--save</span> hexo<span class="hljs-literal">-theme-fluid</span><br></code></pre></td></tr></table></figure><p>完成安装后，可以在<code>themes</code>文件夹中看到<code>fluid</code>文件夹，说明安装成功。官方给出了非常详细的<a href="https://hexo.fluid-dev.com/docs/guide/">配置文档</a>，想要配置最适合自己风格的主题，建议自己阅读文档。接下来一节将给出一些重要的配置。</p><h2 id="5-3-一些重要的配置"><a href="#5-3-一些重要的配置" class="headerlink" title="5.3 一些重要的配置"></a>5.3 一些重要的配置</h2><h3 id="5-3-1-初始化后的必要步骤"><a href="#5-3-1-初始化后的必要步骤" class="headerlink" title="5.3.1 初始化后的必要步骤"></a>5.3.1 初始化后的必要步骤</h3><p>首先，安装Fluid后，需要在根目录下新建一个<code>_config.fluid.yml</code>文件，并将<code>themes/fluid/_config.yml</code>中的所有内容复制过去。<br>然后，在<code>_config.yml</code>文件中指定主题和语言：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">theme: fluid  <span class="hljs-comment"># 指定主题</span><br>language: zh<span class="hljs-literal">-CN</span>  <span class="hljs-comment"># 指定语言</span><br></code></pre></td></tr></table></figure><p>最后，可以选择设置主题的自动更新，在根目录下输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm update <span class="hljs-literal">--save</span> hexo<span class="hljs-literal">-theme-fluid</span><br></code></pre></td></tr></table></figure><h3 id="5-3-2-创建关于页"><a href="#5-3-2-创建关于页" class="headerlink" title="5.3.2 创建关于页"></a>5.3.2 创建关于页</h3><p>关于页可以展示你的基本信息、兴趣、联系方式等，首次使用时需要先进行创建，在根目录输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于我</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span>  <span class="hljs-comment"># 必须存在且不能修改</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="5-3-3-覆盖配置"><a href="#5-3-3-覆盖配置" class="headerlink" title="5.3.3 覆盖配置"></a>5.3.3 覆盖配置</h3><p>当主题更新时可能导致原有配置丢失，因此在初始化后我们建立了<code>_config.fluid.yml</code>，<strong>之后所有的配置都只需要在根目录下的_config.fluid.yml文件中修改</strong>，而<code>themes/fluid/_config.yml</code>中的修改则无效、被覆盖。<br>注意：以下的所有配置也都是在<code>_config.fluid.yml</code>中修改！</p><h3 id="5-3-4-显示网站数据统计"><a href="#5-3-4-显示网站数据统计" class="headerlink" title="5.3.4 显示网站数据统计"></a>5.3.4 显示网站数据统计</h3><p>推荐采用leancloud实现显示网站的访客人数和总访问量，配置如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">footer:<br>  statistics:<br>    enable: false<br>    source: <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 在此处输入leancloud</span><br>    pv_format: <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    uv_format: <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><p>想要使用leancloud的功能，需要注册账号、新建应用并获取<code>App ID</code>和<code>App Key</code>，具体操作可以查看<a href="https://blog.csdn.net/lijing742180/article/details/87928554">这篇博文</a>。之后将获取的信息做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">leancloud:<br>    app_id: 你获取的App ID<br>    app_key: 你获取的App Key<br></code></pre></td></tr></table></figure><p>这样就可以实现网站数据统计，需要注意的是在<strong>本地测试时可能会出现统计数据异常</strong>，这属于<strong>正常现象</strong>。</p><h3 id="5-3-5-开启博客评论功能"><a href="#5-3-5-开启博客评论功能" class="headerlink" title="5.3.5 开启博客评论功能"></a>5.3.5 开启博客评论功能</h3><p>推荐使用基于leancloud的Valine，首先需要做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br>comments:<br>enable: true<br>    <span class="hljs-built_in">type</span>: valine  <span class="hljs-comment"># 在此处输入valine</span><br></code></pre></td></tr></table></figure><p>之后，在valine选项中做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># Valine</span><br>valine:<br>  appId: 你获取的App ID<br>  appKey: 你获取的App Key<br></code></pre></td></tr></table></figure><p>访问<a href="https://valine.js.org/">Valine官网</a>，可以自定义评论系统的细节。</p><h1 id="6-撰写博客并发布"><a href="#6-撰写博客并发布" class="headerlink" title="6. 撰写博客并发布"></a>6. 撰写博客并发布</h1><h2 id="6-1-撰写博客"><a href="#6-1-撰写博客" class="headerlink" title="6.1 撰写博客"></a>6.1 撰写博客</h2><p>经过前面的六步，我们终于完成了一个博客系统的搭建，接下来我们就可以撰写自己的博文了。Hexo采用Markdown语法来编辑博文，这里推荐采用<a href="https://www.csdn.net/">csdn</a>的发布文章功能，先在csdn上写博文，之后导出为.md格式，就可以生成自己的博文。</p><h2 id="6-2-发布博客"><a href="#6-2-发布博客" class="headerlink" title="6.2 发布博客"></a>6.2 发布博客</h2><p>根据<a href="https://hexo.io/docs/writing.html">官方文档</a>，Hexo共有三种<code>layout</code>（排版形式）：</p><table><thead><tr><th>Layout</th><th>Path</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts</td></tr><tr><td>draft</td><td>source&#x2F;_drafts</td></tr><tr><td>page</td><td>source&#x2F;</td></tr></tbody></table><p>在站点根目录下采用以下命令可以生成一个新的<code>layout</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new [<span class="hljs-type">layout</span>] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>layout</code>的缺省值为<code>post</code>，会生成一篇新的博文；若选择<code>page</code>，则会生成一个新的页面（就像之前的关于页）；若选择<code>draft</code>，则会生成一个草稿，你可以在这里自主编辑并选择合适的时机publish到<code>source/_posts</code>文件夹中。基于csdn的协助，我们可以根据以下步骤快速的完成一篇博文并上传：<br>(1) 采用上述命令生成一篇新的<code>post</code>，执行后会在<code>source/_posts</code>中生成一个<code>&lt;title&gt;.md</code>的文件，这部分内容如下（又称为<code>Front-matter</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&lt;title&gt;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&lt;present</span> <span class="hljs-string">time&gt;</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">&lt;preset</span> <span class="hljs-string">tags&gt;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>(2) 将csdn中导出的md文字部分拷贝在上述内容的最后；<br>(3) 执行以下命令，在本地（<code>http://localhost:4000</code>）查看效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo c   <span class="hljs-comment"># 即hexo clean，清除缓存</span><br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>(4) 本地查看无误后，上传到网站：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo d<br></code></pre></td></tr></table></figure><h2 id="6-3-设置Front-matter"><a href="#6-3-设置Front-matter" class="headerlink" title="6.3 设置Front-matter"></a>6.3 设置Front-matter</h2><p>一篇博文的前页（即<code>Front-matter</code>）描述了这篇博文的一些基本信息，根据<a href="https://hexo.io/docs/front-matter">官方文档</a>，共有11类设置。这里主要介绍一下比较常用的设置：<br>(1) categories（类别）<br>该属性用于对博文进行分类，例如是属于python还是属于java。类别有层次之分，在描述时需要从高到低，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Programming</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Python</span><br></code></pre></td></tr></table></figure><p> 本例说明该博文属于<code>Programming</code>类别下的<code>Python</code>子类。<br> (2) tags（标签）<br> 该属性用于描述博文的性质，例如该博文是经验分享还是刷题解析。标签是没有层次之分，描述时无顺序要求，例如：<br> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">经验</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">后端</span><br></code></pre></td></tr></table></figure><br>本例说明该博文主要讲述了后端的经验分享。<br>(3) excerpt（摘要）<br>摘要会出现在博客首页，对整篇博文进行一个简要的介绍。根据<a href="https://www.dazhuanlan.com/sunningjiao/topics/1360401">资料</a>，设置摘要共有三种方法。官方推荐的方法是使用 <code>&lt;!-- more --&gt;</code> 进行手动截断，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">这是摘要</span><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">more</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">这是正文</span>   <span class="hljs-comment"># 注意：正文在显示时仍包括了上述摘要部分</span><br></code></pre></td></tr></table></figure><p>我个人推荐在前页中添加<code>excerpt</code>字段来手动输入摘要：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样设置摘要自由度较高，无需担心摘要和正文内容不同。</p><h2 id="6-4-设置博文的url"><a href="#6-4-设置博文的url" class="headerlink" title="6.4 设置博文的url"></a>6.4 设置博文的url</h2><p>Hexo中一篇博文默认的url为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">:year/:month/:day/:title/</span>   <span class="hljs-comment"># 年/月/日/文章路径+博文名字</span><br></code></pre></td></tr></table></figure><p>这样十分容易造成中文url乱码，实际应用效果很差。<a href="https://blog.csdn.net/qq_41942221/article/details/116007091">这篇博文</a>给出了两种解决方案。这里我推荐将<code>source/_posts</code>下的各个md文件按照类似<code>blog00x</code>的顺序进行命名，然后在站点根目录下的<code>_config.yml</code>文件中做如下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:title/</span><br></code></pre></td></tr></table></figure><p>对于懒人则可以使用Hash的方式，这样不需要进行统一编号，设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:hash/</span><br></code></pre></td></tr></table></figure><p>值得注意的是这里参考了<a href="https://zkqiang.cn/">官方推送的个人博客网站</a>，没有使用年月日来设置url，而是采用<code>posts</code>来设置url，避免网址冗余。</p><h2 id="6-5-设置博文中的图片"><a href="#6-5-设置博文中的图片" class="headerlink" title="6.5 设置博文中的图片"></a>6.5 设置博文中的图片</h2><p>一篇博文的图片可以分为两类：第一类是在首页显示的博文封面图，第二类是在文章正文中显示的内容图。放置与引用这些图片有很多很多种方式，这里我推荐一下我个人的设置，并不代表它是最方便、最合适的，但是我个人用起来最为舒服，具体如下：<br>对于每一篇博文（即放在_posts中的每一个md文件），都在<code>source/img</code>目录下新建一个和博客同名的文件夹，将所有的图片（包括封面图和内容图）统一放在其中。对于封面图，在博文md文件的前页中添加如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/博客名/图片名</span>  <span class="hljs-comment"># 图片要加扩展名jpg等，下同</span><br></code></pre></td></tr></table></figure><p>对于内容图，直接在正文的相应位置做如下引用即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">![</span><span class="hljs-string">图片标题](/img/博客名/图片名)</span><br></code></pre></td></tr></table></figure><p>如果之后的网站具有一定规模，图片较多难以管理，可以采用图床进行云管理，详见<a href="https://www.cnblogs.com/huanhao/p/picup.html">这里</a>。</p><h2 id="7-博客美化"><a href="#7-博客美化" class="headerlink" title="7. 博客美化"></a>7. 博客美化</h2><h2 id="7-1-设置live2d看板娘"><a href="#7-1-设置live2d看板娘" class="headerlink" title="7.1 设置live2d看板娘"></a>7.1 设置live2d看板娘</h2><p>这里推荐张书樵大神的<a href="https://github.com/stevenjoezhang/live2d-widget">开源项目</a>，该项目能够切换多种不同看板娘形象，同时具有丰富可自定义的对话内容。具体操作如下：</p><ul><li>从GitHub上下载该项目，解压至<code>/themes/fluid/source</code>文件夹下，将项目名称重命名为<code>live2d-widget</code>，并删除其中的<code>.gitignore</code>文件；</li><li>修改<code>autoload.js</code>文件，将<code>live2d_path</code>修改为如下。并将该文件下的<code>cdnPath</code>注释掉，使用<code>apiPath</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> live2d_path = <span class="hljs-string">&quot;/live2d-widget/&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>打开<code>/themes/fluid/layout/layout.ejs</code>，在<code>&lt;body&gt;</code>下一行添加如下代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在主题文件配置文件<code>_config.fluid.yaml</code>（注意是博客根目录下的配置文件）中添加以下语句：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">live2d:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>通过以上步骤，就成功添加了一个live2d看板娘。作者建议针对自己的网页对看板娘的位置、大小、文本等信息进行自定义。其中，在<code>waifu.css</code>中可以修改看板娘位置等信息，在<code>waifu-tips.json</code>中可以修改看板娘对话（强烈建议自己修改对话，一些对话少儿不宜）。设置说明可见<a href="https://www.cnblogs.com/c10udlnk/p/14727173.html">这篇博文</a>（对css语法要求较高）。</p><h1 id="8-配置sitemap"><a href="#8-配置sitemap" class="headerlink" title="8. 配置sitemap"></a>8. 配置sitemap</h1><p>虽然你的网站已经成功部署，但是实际上它还是和“单机版”一样，这是因为你博客的任何内容都<strong>没有被搜索引擎收录</strong>，其他用户在搜索相关内容时，搜索引擎是不会显示你的内容的。想要自己的博客被搜索引擎收录，你需要<strong>配置各大搜索引擎的sitemap</strong>。我自己尝试配置了谷歌和百度的sitemap，但是一直没有成功。以下资料可供大家参考：<br><a href="https://cloud.tencent.com/developer/article/1946996">(1) Hexo-生成sitemap站点地图</a><br><a href="https://www.jianshu.com/p/3ae41ef36b43">(2) Hexo 博客添加百度sitemap以及进行SEO优化</a></p><h1 id="9-博客迁移到新电脑"><a href="#9-博客迁移到新电脑" class="headerlink" title="9. 博客迁移到新电脑"></a>9. 博客迁移到新电脑</h1><p>因为换电脑需要将博客迁移至新电脑时，可以按照如下步骤实现快速迁移：</p><p>（1）在新电脑中安装git和Node.js，安装过程见第二部分，在此不作赘述；</p><p>（2）打开git bash，分别运行如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name &quot;你的名字&quot;<br>git config --global user.email &quot;你的邮箱&quot;<br>ssh-keygen -t rsa -C &quot;你的邮箱&quot;<br></code></pre></td></tr></table></figure><p>在用户目录的.ssh文件夹下打开id_rsa.pub的公钥，复制所有信息，并在自己的github账号中的Settings -&gt; SSH and GPG keys中点击New SSH key，Title输入框随便填，Key输入框粘贴刚才的信息。</p><p>（3）把旧电脑的博客文件夹复制到新电脑的任意位置，删除掉node_modules文件夹（其他的文件可以不用动，会自动覆盖掉）。用cmd打开新电脑中该文件夹的位置，运行如下代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install<br></code></pre></td></tr></table></figure><p>注意，不要用 <code>hexo init</code> 进行初始化，否则会将配置文件初始化。</p><p>（4）依次运行 <code>hexo g</code> 和 <code>hexo s</code> 进行本地测试，最后运行 <code>hexo d</code> 进行部署。注意：在执行部署时，可能会出现如下警告，只需要输入yes即可。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">The authenticity <span class="hljs-keyword">of</span> host <span class="hljs-comment">&#x27;github.com&#x27; can&#x27;t be established.</span><br>This <span class="hljs-keyword">key</span> <span class="hljs-built_in">is</span> <span class="hljs-built_in">not</span> known <span class="hljs-keyword">by</span> any other names.<br>Are you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (yes/no/[fingerprint])?<br></code></pre></td></tr></table></figure><h1 id="10-结语"><a href="#10-结语" class="headerlink" title="10. 结语"></a>10. 结语</h1><p>以上就是基于Hexo+Fluid的个人博客系统搭建与使用的完整教程了。从第七步中我们可以看出来，如果你的目的是想要博文被大家看到，那么个人博客系统远远不如一些主流的平台，如微信、知乎、掘金等。但是从零搭建起只属于自己的网站还是非常有成就感的，祝大家都能找到人生的意义所在。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
